<?php

namespace Riomigal\Languages\Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Livewire;
use Riomigal\Languages\Livewire\Languages;
use Riomigal\Languages\Models\Language;
use Riomigal\Languages\Models\Translator;
use Riomigal\Languages\Tests\BaseTestCase;

class LanguageTest extends BaseTestCase
{
    use RefreshDatabase;

    /**
     * @var Language
     */
    protected Language $fallbackLanguage;

    /**
     * @var Translator
     */
    protected Translator $admin;

    /**
     * @var Translator
     */
    protected Translator $translator;

    /**
     * @return void
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Language::query()->delete();
        $this->fallbackLanguage = $this->createFallbackLanguage();
        $languages = Language::all();
        $this->admin = $this->createAdmin($languages);
        $this->translator = $this->createUser($languages);
    }

    /**
     * @test
     */
    public function lang_create_language(): void
    {
        $language = factory(Language::class)->create();
        $this->assertDatabaseHas(config('languages.table_languages'), [
            'name' => $language->name,
            'native_name' => $language->native_name,
            'code' => $language->code
        ]);
    }

    /**
     * @test
     */
    public function lang_livewire_admin_can_login_and_sees_admin_options(): void
    {
        /**
         * Given a user is an admin, when he accesses the UI
         */
        Livewire::actingAs($this->admin)
            ->test(Languages::class, ['translator', $this->admin])
            /**
             * Then he should see the options
             */
            ->assertSee($this->fallbackLanguage->native_name)
            ->assertSee(__('languages::languages.button.import_languages'))
            ->assertSee(__('languages::languages.button.import_translations'))
            ->assertSee(__('languages::languages.button.add_language'))
            ->assertSee(__('languages::languages.button.find_missing_translations'))
            ->assertSee(__('languages::table.delete'));
    }

    /**
     * @test
     */
    public function lang_livewire_translator_can_login_and_doesnt_see_admin_options(): void
    {
        /**
         * Given a user is not an admin, when he accesses the UI
         */
        Livewire::actingAs($this->translator)
            ->test(Languages::class, ['translator', $this->admin])
            /**
             * Then he should not see the admin options
             */
            ->assertSee($this->fallbackLanguage->native_name)
            ->assertDontSee('>' . __('languages::languages.button.import_languages') . '<')
            ->assertDontSee('>' . __('languages::languages.button.import_translations') . '<')
            ->assertDontSee('>' . __('languages::languages.button.add_language') . '<')
            ->assertDontSee('>' . __('languages::languages.button.find_missing_translations') . '<')
            ->assertDontSee(__('languages::table.delete'));
    }

    /**
     * @test
     */
    public function lang_livewire_user_not_authenticated_returns_403(): void
    {
        Livewire::test(Languages::class, ['translator', $this->admin])
            ->assertStatus(403);
    }

    /**
     * @test
     */
    public function lang_livewire_admin_can_add_language(): void
    {
        /**
         * GIvent there is one language
         */
        $this->assertEquals(1, Language::count());

        Livewire::actingAs($this->admin)
            ->test(Languages::class, ['translator', $this->admin])
            ->set('language', 'de')
            /**
             * When a user creates a new language (de)
             */
            ->call('create')
            /**
             * Then a new language should be visible in the UI and a new entry in the database
             */
            ->assertSee($this->fallbackLanguage->native_name)
            ->assertSee(Language::find(2)->name)
            ->assertSee(__('languages::table.delete'));

        $this->assertEquals(2, Language::count());
    }

    /**
     * @test
     */
    public function lang_livewire_admin_can_delete_language(): void
    {
        /**
         * Background
         */
        $languages = factory(Language::class)->times(2)->create();

        /**
         * Given there are three languages and a user wants to delete one
         */
        $languageToDelete = $languages->get(0);
        $this->assertEquals(3, Language::count());

        Livewire::actingAs($this->admin)
            ->test(Languages::class, ['translator', $this->admin])
            ->assertSee($languageToDelete->native_name)
            ->set('language', 'de')
            /**
             * When the uses deletes a language
             */
            ->call('delete', $languageToDelete->id)
            /**
             * Then the language should not more be visible in the UI and Database
             */
            ->assertSee($this->fallbackLanguage->native_name)
            ->assertDontSee($languageToDelete->native_name);

        $this->assertEquals(2, Language::count());
        $this->assertNull(Language::where('code', $languageToDelete->code)->first());
    }

    /**
     * @test
     */
    public function lang_livewire_admin_can_search_language(): void
    {
        /**
         * Background
         */
        $languages = factory(Language::class)->times(2)->create();

        /**
         * Given there are three languages and a user wants to search for "English"
         */
        $newLanguage = $languages->get(0);
        $secondNewLanguage = $languages->get(1);
        $this->assertEquals(3, Language::count());

        Livewire::actingAs($this->admin)
            ->test(Languages::class, ['translator', $this->admin])
            ->assertSee($newLanguage->native_name)
            ->assertSee($secondNewLanguage->native_name)
            ->assertSee($this->fallbackLanguage->native_name)
            /**
             * When the user searches for a language
             */
            ->set('search', $this->fallbackLanguage->name)
            /**
             * Then only languages with "English" should be visible
             */
            ->assertDontSee($newLanguage->native_name)
            ->assertDontSee($secondNewLanguage->native_name);

    }


}
