<?php

namespace Riomigal\Languages\Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Livewire;
use Riomigal\Languages\Jobs\ImportLanguagesJob;
use Riomigal\Languages\Jobs\ImportTranslationsJob;
use Riomigal\Languages\Livewire\Translations;
use Riomigal\Languages\Models\Language;
use Riomigal\Languages\Models\Translator;
use Riomigal\Languages\Services\ImportLanguageService;
use Riomigal\Languages\Services\ImportTranslationService;
use Riomigal\Languages\Tests\BaseTestCase;

class TranslationsTest extends BaseTestCase
{
    use RefreshDatabase;

    /**
     * @var ImportTranslationService
     */
    protected ImportTranslationService $importTranslationService;

    /**
     * @var Language
     */
    protected Language $language;

    /**
     * @return void
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $languages = Language::all();
        $this->admin = $this->createAdmin($languages);
        ImportLanguagesJob::dispatch((new ImportLanguageService()), $this->admin);
        ImportTranslationsJob::dispatch(new ImportTranslationService(), $this->admin);
    }

    /**
     * @test
     */
    public function transl_admin_can_access_trans_service_and_see_admin_options(): void
    {
        /**
         * Given there are 4 languages with translations
         */
        $this->language = Language::find(1);
        $languageTwo = Language::find(4);

        /**
         * When an admin user accesses the Translatiosn UI of en
         */
        Livewire::actingAs($this->admin)
            ->test(Translations::class, ['language' => $this->language])
            /**
             * Then he should see all options
             */
            ->assertSee(__('languages::translations.title', ['language' => $this->language->name, 'code' => $this->language->code]))
            ->assertSee(__('languages::translations.button.export_translation'))
            ->assertSee(__('languages::translations.button.approve_all'))
            ->assertSee(__('languages::translations.button.export_all_translations'))
            ->assertSee(__('languages::translations.checkbox_filter_button'))
            ->assertSee(__('languages::translations.table.action.translate'))
            ->assertDontSee(__('languages::translations.title', ['language' => $languageTwo->name, 'code' => $languageTwo->code]));
    }

    /**
     * @test
     */
    public function transl_translator_can_access_assigned_language_but_dont_see_admin_options(): void
    {
        /**
         * Given there are 4 languages with translations and user is not admin but translator
         */
        $this->language = Language::find(1);
        $languageTwo = Language::find(4);
        $translator = factory(Translator::class)->create();
        $translator->languages()->attach(Language::find(1)->id);
        /**
         * When the translator accesses an assigned langauge
         */
        Livewire::actingAs($translator)
            ->test(Translations::class, ['language' => $this->language])
            /**
             * Then he should see only translator available options
             */
            ->assertSee(__('languages::translations.title', ['language' => $this->language->name, 'code' => $this->language->code]))
            ->assertDontSee(__('languages::translations.button.export_translation'))
            ->assertDontSee(__('languages::translations.button.approve_all'))
            ->assertDontSee(__('languages::translations.button.export_all_translations'))
            ->assertSee(__('languages::translations.checkbox_filter_button'))
            ->assertSee(__('languages::translations.table.action.translate'))
            ->assertDontSee(__('languages::translations.title', ['language' => $languageTwo->name, 'code' => $languageTwo->code]));
    }

    /**
     * @test
     */
    public function transl_translator_cannot_access_not_assigned_language(): void
    {
        /**
         * Given there are 4 languages with translations and user is not admin but translator
         */
        $this->language = Language::find(1);
        $languageTwo = Language::find(4);
        $translator = factory(Translator::class)->create();
        $translator->languages()->attach(Language::find(4)->id);

        /**
         * When the translator accesses an not assigned langauge
         */
        Livewire::actingAs($translator)
            ->test(Translations::class, ['language' => $this->language])
            /**
             * Then it should returns 403
             */
            ->assertStatus(403);
    }

    /**
     * @test
     */
    public function transl_guest_cannot_access_page(): void
    {
        $this->language = Language::find(1);
        Livewire::test(Translations::class, ['language' => $this->language])
            ->assertStatus(403);
    }


}
