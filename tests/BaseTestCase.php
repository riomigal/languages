<?php

namespace Riomigal\Languages\Tests;

use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\File;
use Livewire\LivewireServiceProvider;
use Orchestra\Testbench\TestCase;
use Riomigal\Languages\LanguagesServiceProvider;
use Riomigal\Languages\Tests\Traits\CreateLanguages;
use Riomigal\Languages\Tests\Traits\CreateUsers;

class BaseTestCase extends TestCase
{
    use CreateUsers, CreateLanguages;

    /**
     * Automatically enables package discoveries.
     *
     * @var bool
     */
    protected $enablesPackageDiscoveries = true;

    /**
     * Setup the test environment.
     */
    public function setUp(): void
    {
        parent::setUp();
        Auth::shouldUse(config('languages.translator_guard'));
        $this->withFactories(__DIR__ . '/../database/factories');
        $this->restoreTempDataFolder();
        $this->copyTestData();
    }

    /**
     * @return void
     */
    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->restoreTempDataFolder();
    }

    /**
     * Get package providers.
     *
     * @param \Illuminate\Foundation\Application $app
     *
     * @return array<int, class-string<\Illuminate\Support\ServiceProvider>>
     */
    protected function getPackageProviders($app)
    {
        return [
            LanguagesServiceProvider::class,
            LivewireServiceProvider::class
        ];
    }

    /**
     * Define environment setup.
     *
     * @param \Illuminate\Foundation\Application $app
     * @return void
     */
    protected function defineEnvironment($app)
    {
        // Setup default database to use sqlite :memory:
        $app['config']->set('database.default', 'testbench');
        $app['config']->set('database.connections.testbench', [
            'driver' => 'sqlite',
            'database' => ':memory:',
            'prefix' => '',
        ]);
    }

    /**
     * @param $app
     * @return void
     */
    protected function usesMySqlConnection($app)
    {
        $app->config->set('database.default', 'mysql');
    }

    /**
     * @param $app
     * @return void
     */
    protected function usesSqliteConnection($app)
    {
        $app->config->set('database.default', 'sqlite');
    }

    /**
     * @return string
     */
    protected function getDataPath(): string
    {
        return __DIR__ . '/data/lang';
    }

    /**
     * @return string
     */
    protected function getTempDataPath(): string
    {
        return App::langPath();
    }

    protected function restoreTempDataFolder(): void
    {
        $path = $this->getTempDataPath();
        $this->rrmdir($path);
        mkdir($path);
    }

    protected function copyTestData(): void
    {
        File::copyDirectory($this->getDataPath(), $this->getTempDataPath());

    }

    /**
     * @param $dir
     * @return void
     */
    private function rrmdir($dir) {
        if (is_dir($dir)) {
            $objects = scandir($dir);
            foreach ($objects as $object) {
                if ($object != "." && $object != "..") {
                    if (is_dir($dir . DIRECTORY_SEPARATOR . $object) && !is_link($dir . "/" . $object))
                        $this->rrmdir($dir . DIRECTORY_SEPARATOR . $object);
                    else
                        unlink($dir . DIRECTORY_SEPARATOR . $object);
                }
            }
            rmdir($dir);
        }
    }

    /**
     * @param $dir
     * @param $results
     * @return array|mixed
     */
    function countTranslationsInFiles($dir, &$results = array())
    {
        $files = scandir($dir);

        foreach ($files as $key => $value) {
            $path = realpath($dir . DIRECTORY_SEPARATOR . $value);
            if (!is_dir($path)) {
                $results[] = $path;
            } else if ($value != "." && $value != "..") {
                getDirContents($path, $results);
                $results[] = $path;
            }
        }

        return $results;
    }


}
